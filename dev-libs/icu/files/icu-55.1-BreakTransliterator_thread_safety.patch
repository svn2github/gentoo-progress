https://ssl.icu-project.org/trac/ticket/11603
https://ssl.icu-project.org/trac/changeset/37342
https://ssl.icu-project.org/trac/changeset/37414

--- i18n/brktrans.cpp
+++ i18n/brktrans.cpp
@@ -1,6 +1,6 @@
 /*
 **********************************************************************
-*   Copyright (C) 2008-2010, International Business Machines
+*   Copyright (C) 2008-2015, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
@@ -12,13 +12,15 @@
 
 #if  !UCONFIG_NO_TRANSLITERATION && !UCONFIG_NO_BREAK_ITERATION
 
-#include "unicode/unifilt.h"
+#include "unicode/brkiter.h"
+#include "unicode/localpointer.h"
 #include "unicode/uchar.h"
+#include "unicode/unifilt.h"
 #include "unicode/uniset.h"
-#include "unicode/brkiter.h"
+
 #include "brktrans.h"
-#include "unicode/uchar.h"
 #include "cmemory.h"
+#include "mutex.h"
 #include "uprops.h"
 #include "uinvchar.h"
 #include "util.h"
@@ -36,11 +38,8 @@
  * '}'.
  */
 BreakTransliterator::BreakTransliterator(UnicodeFilter* adoptedFilter) :
-    Transliterator(UNICODE_STRING("Any-BreakInternal", 17), adoptedFilter),
-    fInsertion(SPACE) {
-        bi = NULL;
-        UErrorCode status = U_ZERO_ERROR;
-        boundaries = new UVector32(status);
+        Transliterator(UNICODE_STRING("Any-BreakInternal", 17), adoptedFilter),
+        cachedBI(NULL), cachedBoundaries(NULL), fInsertion(SPACE) {
     }
 
 
@@ -48,25 +47,14 @@
  * Destructor.
  */
 BreakTransliterator::~BreakTransliterator() {
-    delete bi;
-    bi = NULL;
-    delete boundaries;
-    boundaries = NULL;
 }
 
 /**
  * Copy constructor.
  */
 BreakTransliterator::BreakTransliterator(const BreakTransliterator& o) :
-    Transliterator(o) {
-        bi = NULL;
-        if (o.bi != NULL) {
-            bi = o.bi->clone();
-        }
-        fInsertion = o.fInsertion;
-        UErrorCode status = U_ZERO_ERROR;
-        boundaries = new UVector32(status);
-    }
+        Transliterator(o), cachedBI(NULL), cachedBoundaries(NULL), fInsertion(o.fInsertion) {
+}
 
 
 /**
@@ -83,9 +71,27 @@
                                                     UBool isIncremental ) const {
 
         UErrorCode status = U_ZERO_ERROR;
+        LocalPointer<BreakIterator> bi;
+        LocalPointer<UVector32> boundaries;
+
+        {
+            Mutex m;
+            BreakTransliterator *nonConstThis = const_cast<BreakTransliterator *>(this);
+            boundaries.adoptInstead(nonConstThis->cachedBoundaries.orphan());
+            bi.adoptInstead(nonConstThis->cachedBI.orphan());
+        }
+        if (bi.isNull()) {
+            bi.adoptInstead(BreakIterator::createWordInstance(Locale::getEnglish(), status));
+        }
+        if (boundaries.isNull()) {
+            boundaries.adoptInstead(new UVector32(status));
+        }
+
+        if (bi.isNull() || boundaries.isNull() || U_FAILURE(status)) {
+            return;
+        }
+
         boundaries->removeAllElements();
-        BreakTransliterator *nonConstThis = (BreakTransliterator *)this;
-        nonConstThis->getBreakIterator(); // Lazy-create it if necessary
         UnicodeString sText = replaceableAsString(text);
         bi->setText(sText);
         bi->preceding(offsets.start);
@@ -132,6 +138,18 @@
         offsets.limit += delta;
         offsets.start = isIncremental ? lastBoundary + delta : offsets.limit;
 
+        // Return break iterator & boundaries vector to the cache.
+        {
+            Mutex m;
+            BreakTransliterator *nonConstThis = const_cast<BreakTransliterator *>(this);
+            if (nonConstThis->cachedBI.isNull()) {
+                nonConstThis->cachedBI.adoptInstead(bi.orphan());
+            }
+            if (nonConstThis->cachedBoundaries.isNull()) {
+                nonConstThis->cachedBoundaries.adoptInstead(boundaries.orphan());
+            }
+        }
+
         // TODO:  do something with U_FAILURE(status);
         //        (need to look at transliterators overall, not just here.)
 }
@@ -151,21 +169,6 @@
 }
 
 //
-//  getBreakIterator     Lazily create the break iterator if it does
-//                       not already exist.  Copied from Java, probably
-//                       better to just create it in the constructor.
-//
-BreakIterator *BreakTransliterator::getBreakIterator() {
-    UErrorCode status = U_ZERO_ERROR;
-    if (bi == NULL) {
-        // Note:  Thai breaking behavior is universal, it is not
-        //        tied to the Thai locale.
-        bi = BreakIterator::createWordInstance(Locale::getEnglish(), status);
-    }
-    return bi;
-}
-
-//
 //   replaceableAsString   Hack to let break iterators work
 //                         on the replaceable text from transliterators.
 //                         In practice, the only real Replaceable type that we
--- i18n/brktrans.h
+++ i18n/brktrans.h
@@ -1,6 +1,6 @@
 /*
 **********************************************************************
-*   Copyright (C) 2008-2009, International Business Machines
+*   Copyright (C) 2008-2015, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
@@ -16,6 +16,8 @@
 
 #include "unicode/translit.h"
 
+#include "unicode/localpointer.h"
+
 
 U_NAMESPACE_BEGIN
 
@@ -30,10 +32,6 @@
 class BreakTransliterator : public Transliterator {
 public:
 
-    BreakTransliterator(const UnicodeString &ID, 
-                        UnicodeFilter *adoptedFilter,
-                        BreakIterator *bi, 
-                        const UnicodeString &insertion);
     /**
      * Constructs a transliterator.
      * @param adoptedFilter    the filter for this transliterator.
@@ -61,14 +59,6 @@
     virtual void setInsertion(const UnicodeString &insertion);
 
     /**
-      *  Return the break iterator used by this transliterator.
-      *  Caution, this is the live break iterator; it must not be used while
-      *     there is any possibility that this transliterator is using it.
-      */
-    virtual BreakIterator *getBreakIterator();
-
-
-    /**
      * ICU "poor man's RTTI", returns a UClassID for the actual class.
      */
     virtual UClassID getDynamicClassID() const;
@@ -93,10 +83,9 @@
                                      UBool isIncremental) const;
 
  private:
-     BreakIterator     *bi;
-     UnicodeString      fInsertion;
-     UVector32         *boundaries;
-     UnicodeString      sText;  // text from handleTransliterate().
+     LocalPointer<BreakIterator> cachedBI;
+     LocalPointer<UVector32>     cachedBoundaries;
+     UnicodeString               fInsertion;
 
      static UnicodeString replaceableAsString(Replaceable &r);
 
--- i18n/rbt.cpp
+++ i18n/rbt.cpp
@@ -1,6 +1,6 @@
 /*
 **********************************************************************
-*   Copyright (C) 1999-2013, International Business Machines
+*   Copyright (C) 1999-2015, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
@@ -18,6 +18,7 @@
 #include "rbt_data.h"
 #include "rbt_rule.h"
 #include "rbt.h"
+#include "mutex.h"
 #include "umutex.h"
 
 U_NAMESPACE_BEGIN
@@ -244,17 +245,23 @@
     //   so no concurrent access from multiple threads is possible.
     UBool    lockedMutexAtThisLevel = FALSE;
     if (isDataOwned == FALSE) {
-        // Test whether this request is operating on the same text string as some
+        // Test whether this request is operating on the same text string as
         //   some other transliteration that is still in progress and holding the 
         //   transliteration mutex.  If so, do not lock the transliteration
         //    mutex again.
+        //
+        //  gLockedText variable is protected by the global ICU mutex.
+        //  Shared RBT data protected by transliteratorDataMutex.
+        //
         // TODO(andy): Need a better scheme for handling this.
         UBool needToLock;
-        umtx_lock(NULL);
-        needToLock = (&text != gLockedText);
-        umtx_unlock(NULL);
+        {
+            Mutex m;
+            needToLock = (&text != gLockedText);
+        }
         if (needToLock) {
-            umtx_lock(&transliteratorDataMutex);
+            umtx_lock(&transliteratorDataMutex);  // Contention, longish waits possible here.
+            Mutex m;
             gLockedText = &text;
             lockedMutexAtThisLevel = TRUE;
         }
@@ -269,7 +276,10 @@
 	    }
     }
     if (lockedMutexAtThisLevel) {
-        gLockedText = NULL;
+        {
+            Mutex m;
+            gLockedText = NULL;
+        }
         umtx_unlock(&transliteratorDataMutex);
     }
 }
--- test/intltest/simplethread.h
+++ test/intltest/simplethread.h
@@ -1,6 +1,6 @@
 /********************************************************************
  * COPYRIGHT: 
- * Copyright (c) 1997-2009, International Business Machines Corporation and
+ * Copyright (c) 1997-2015, International Business Machines Corporation and
  * others. All Rights Reserved.
  ********************************************************************/
 
@@ -16,6 +16,8 @@
     virtual  ~SimpleThread();
     int32_t   start(void);        // start the thread
     UBool     isRunning();        // return true if a started thread has exited.
+    void      join() {while (isRunning()) sleep(1);}; // Wait until thread finishes.
+                                  // TODO: add a real implementation.  Ticket #11643
 
     virtual void run(void) = 0;   // Override this to provide the code to run
                                   //   in the thread.
--- test/intltest/tsmthred.cpp
+++ test/intltest/tsmthred.cpp
@@ -1,6 +1,6 @@
 /********************************************************************
  * COPYRIGHT:
- * Copyright (c) 1999-2014, International Business Machines Corporation and
+ * Copyright (c) 1999-2015, International Business Machines Corporation and
  * others. All Rights Reserved.
  ********************************************************************/
 
@@ -102,6 +102,8 @@
 
 #define TSMTHREAD_FAIL(msg) errln("%s at file %s, line %d", msg, __FILE__, __LINE__)
 #define TSMTHREAD_ASSERT(expr) {if (!(expr)) {TSMTHREAD_FAIL("Fail");}}
+#define TSMTHREAD_ASSERT_SUCCESS(status) {if (U_FAILURE(status)) { \
+                  errln("file: %s:%d status = %s\n", __FILE__, __LINE__, u_errorName(status));}}
 
 MultithreadTest::MultithreadTest()
 {
@@ -215,6 +217,12 @@
             TestUnifiedCache();
         }
         break;
+    case 9:
+        name = "TestBreakTranslit";
+        if (exec) {
+            TestBreakTranslit();
+        }
+        break;
     default:
         name = "";
         break; //needed to end loop
@@ -1801,4 +1809,60 @@
     }
 }
 
+
+//
+//  BreakTransliterator Threading Test
+//     This is a test for bug #11603. Test verified to fail prior to fix.
+//
+
+static const Transliterator *gSharedTransliterator;
+static const UnicodeString *gTranslitInput;
+static const UnicodeString *gTranslitExpected;
+
+class BreakTranslitThread: public SimpleThread {
+  public:
+    BreakTranslitThread() {};
+    ~BreakTranslitThread() {};
+    void run();
+};
+
+void BreakTranslitThread::run() {
+    for (int i=0; i<10; i++) {
+        icu::UnicodeString s(*gTranslitInput);
+        gSharedTransliterator->transliterate(s);
+        if (*gTranslitExpected != s) {
+            IntlTest::gTest->errln("%s:%d Transliteration threading failure.", __FILE__, __LINE__);
+            break;
+        }
+    }
+}
+
+void MultithreadTest::TestBreakTranslit() {
+    UErrorCode status = U_ZERO_ERROR;
+    UnicodeString input(
+        "\\u0E42\\u0E14\\u0E22\\u0E1E\\u0E37\\u0E49\\u0E19\\u0E10\\u0E32\\u0E19\\u0E41\\u0E25\\u0E49\\u0E27,");
+    input = input.unescape();
+    gTranslitInput = &input;
+
+    gSharedTransliterator = Transliterator::createInstance(
+        UNICODE_STRING_SIMPLE("Any-Latin; Lower; NFD; [:Diacritic:]Remove; NFC; Latin-ASCII;"), UTRANS_FORWARD, status);
+    TSMTHREAD_ASSERT_SUCCESS(status); 
+
+    UnicodeString expected(*gTranslitInput);
+    gSharedTransliterator->transliterate(expected);
+    gTranslitExpected = &expected;
+
+    BreakTranslitThread threads[4];
+    for (int i=0; i<UPRV_LENGTHOF(threads); ++i) {
+        threads[i].start();
+    }
+    for (int i=0; i<UPRV_LENGTHOF(threads); ++i) {
+        threads[i].join();
+    }
+
+    delete gSharedTransliterator;
+    gTranslitInput = NULL;
+    gTranslitExpected = NULL;
+}
+
 #endif // ICU_USE_THREADS
--- test/intltest/tsmthred.h
+++ test/intltest/tsmthred.h
@@ -1,6 +1,6 @@
 /********************************************************************
  * COPYRIGHT: 
- * Copyright (c) 1997-2014, International Business Machines Corporation and
+ * Copyright (c) 1997-2015, International Business Machines Corporation and
  * others. All Rights Reserved.
  ********************************************************************/
 
@@ -49,6 +49,7 @@
     void TestAnyTranslit();
     void TestConditionVariables();
     void TestUnifiedCache();
+    void TestBreakTranslit();
 
 };
 
