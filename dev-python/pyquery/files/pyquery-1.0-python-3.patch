https://bitbucket.org/olauzanne/pyquery/issue/30

--- pyquery/ajax.py
+++ pyquery/ajax.py
@@ -3,8 +3,7 @@
 from .pyquery import PyQuery as Base
 from .pyquery import no_default
 
-if sys.version_info < (3,):
-    from webob import Request, Response
+from webob import Request, Response
 
 try:
     from paste.proxy import Proxy
--- pyquery/pyquery.py
+++ pyquery/pyquery.py
@@ -114,12 +114,17 @@
         self.parser = kwargs.get('parser', None)
         if 'parser' in kwargs:
             del kwargs['parser']
-        if len(args) >= 1 and isinstance(args[0], basestring) \
-           and args[0].startswith('http://'):
-            kwargs['url'] = args[0]
-            if len(args) >= 2:
-                kwargs['data'] = args[1]
-            args = []
+        if len(args) >= 1:
+            if isinstance(args[0], str) and args[0].startswith('http://'):
+                kwargs['url'] = args[0]
+                if len(args) >= 2:
+                    kwargs['data'] = args[1]
+                args = []
+            elif isinstance(args[0], bytes) and args[0].startswith(b'http://'):
+                kwargs['url'] = args[0]
+                if len(args) >= 2:
+                    kwargs['data'] = args[1]
+                args = []
 
         if 'parent' in kwargs:
             self._parent = kwargs.pop('parent')
--- pyquery/test.py
+++ pyquery/test.py
@@ -10,21 +10,19 @@
 import sys
 import os
 
+from webob import Request, Response, exc
+import pyquery
+from pyquery import PyQuery as pq
+from .ajax import PyQuery as pqa
+
 PY3k = sys.version_info >= (3,)
 
 if PY3k:
     from io import StringIO
-    import pyquery
-    from pyquery.pyquery import PyQuery as pq
     from http.client import HTTPConnection
-    pqa = pq
 else:
     from cStringIO import StringIO
-    import pyquery
     from httplib import HTTPConnection
-    from webob import Request, Response, exc
-    from pyquery import PyQuery as pq
-    from ajax import PyQuery as pqa
 
 socket.setdefaulttimeout(1)
 
@@ -324,9 +322,9 @@
     req = Request(environ)
     response = Response()
     if req.method == 'GET':
-        response.body = '<pre>Yeah !</pre>'
+        response.body = b'<pre>Yeah !</pre>'
     else:
-        response.body = '<a href="/plop">Yeah !</a>'
+        response.body = b'<a href="/plop">Yeah !</a>'
     return response(environ, start_response)
 
 def secure_application(environ, start_response):
@@ -337,20 +335,17 @@
 class TestAjaxSelector(TestSelector):
     klass = pqa
 
-    @not_py3k
     @with_net
     def test_proxy(self):
         e = self.klass([])
         val = e.get('http://pyquery.org/')
         assert len(val('body')) == 1, (str(val.response), val)
 
-    @not_py3k
     def test_get(self):
         e = self.klass(app=application)
         val = e.get('/')
         assert len(val('pre')) == 1, val
 
-    @not_py3k
     def test_secure_get(self):
         e = self.klass(app=secure_application)
         val = e.get('/', environ=dict(REMOTE_USER='gawii'))
@@ -358,19 +353,16 @@
         val = e.get('/', REMOTE_USER='gawii')
         assert len(val('pre')) == 1, val
 
-    @not_py3k
     def test_secure_get_not_authorized(self):
         e = self.klass(app=secure_application)
         val = e.get('/')
         assert len(val('pre')) == 0, val
 
-    @not_py3k
     def test_post(self):
         e = self.klass(app=application)
         val = e.post('/')
         assert len(val('a')) == 1, val
 
-    @not_py3k
     def test_subquery(self):
         e = self.klass(app=application)
         n = e('div')
