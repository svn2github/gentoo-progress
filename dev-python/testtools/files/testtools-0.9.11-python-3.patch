http://bazaar.launchpad.net/~testtools-dev/testtools/trunk/revision/197

--- testtools/helpers.py
+++ testtools/helpers.py
@@ -1,10 +1,12 @@
-# Copyright (c) 2010 testtools developers. See LICENSE for details.
+# Copyright (c) 2010-2011 testtools developers. See LICENSE for details.
 
 __all__ = [
     'try_import',
     'try_imports',
     ]
 
+import sys
+
 
 def try_import(name, alternative=None, error_callback=None):
     """Attempt to import ``name``.  If it fails, return ``alternative``.
@@ -25,8 +27,8 @@
         module_name = '.'.join(module_segments)
         try:
             module = __import__(module_name)
-        except ImportError, e:
-            last_error = e
+        except ImportError:
+            last_error = sys.exc_info()[1]
             module_segments.pop()
             continue
         else:
--- testtools/tests/test_helpers.py
+++ testtools/tests/test_helpers.py
@@ -10,12 +10,12 @@
     Is,
     Not,
     )
-    
-    
-def check_error_callback(test, function, arg, expected_error_count, 
+
+
+def check_error_callback(test, function, arg, expected_error_count,
     expect_result):
     """General test template for error_callback argument.
-    
+
     :param test: Test case instance.
     :param function: Either try_import or try_imports.
     :param arg: Name or names to import.
@@ -29,7 +29,7 @@
         cb_calls.append(e)
     try:
         result = function(arg, error_callback=cb)
-    except ImportError, e:
+    except ImportError:
         test.assertFalse(expect_result)
     else:
         if expect_result:
@@ -79,20 +79,20 @@
         result = try_import('os.path.join')
         import os
         self.assertThat(result, Is(os.path.join))
-        
+
     def test_error_callback(self):
         # the error callback is called on failures.
         check_error_callback(self, try_import, 'doesntexist', 1, False)
 
     def test_error_callback_missing_module_member(self):
-        # the error callback is called on failures to find an object 
+        # the error callback is called on failures to find an object
         # inside an existing module.
         check_error_callback(self, try_import, 'os.nonexistent', 1, False)
 
     def test_error_callback_not_on_success(self):
         # the error callback is not called on success.
         check_error_callback(self, try_import, 'os.path', 0, True)
-        
+
 
 class TestTryImports(TestCase):
 
@@ -140,16 +140,16 @@
         result = try_imports(['os.doesntexist', 'os.path'])
         import os
         self.assertThat(result, Is(os.path))
-        
+
     def test_error_callback(self):
         # One error for every class that doesn't exist.
-        check_error_callback(self, try_imports, 
+        check_error_callback(self, try_imports,
             ['os.doesntexist', 'os.notthiseither'],
             2, False)
-        check_error_callback(self, try_imports, 
+        check_error_callback(self, try_imports,
             ['os.doesntexist', 'os.notthiseither', 'os'],
             2, True)
-        check_error_callback(self, try_imports, 
+        check_error_callback(self, try_imports,
             ['os.path'],
             0, True)
 
